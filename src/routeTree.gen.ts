/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as AuthProductsIndexRouteImport } from './routes/_auth/products/index'
import { Route as AuthProductsProductIdRouteImport } from './routes/_auth/products/$productId'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthProductsIndexRoute = AuthProductsIndexRouteImport.update({
  id: '/products/',
  path: '/products/',
  getParentRoute: () => AuthRoute,
} as any)
const AuthProductsProductIdRoute = AuthProductsProductIdRouteImport.update({
  id: '/products/$productId',
  path: '/products/$productId',
  getParentRoute: () => AuthRoute,
} as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/products/$productId': typeof AuthProductsProductIdRoute
  '/products': typeof AuthProductsIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/products/$productId': typeof AuthProductsProductIdRoute
  '/products': typeof AuthProductsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_auth': typeof AuthRouteWithChildren
  '/login': typeof LoginRoute
  '/_auth/products/$productId': typeof AuthProductsProductIdRoute
  '/_auth/products/': typeof AuthProductsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/login' | '/products/$productId' | '/products'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/products/$productId' | '/products'
  id:
    | '__root__'
    | '/_auth'
    | '/login'
    | '/_auth/products/$productId'
    | '/_auth/products/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/products/': {
      id: '/_auth/products/'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof AuthProductsIndexRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/products/$productId': {
      id: '/_auth/products/$productId'
      path: '/products/$productId'
      fullPath: '/products/$productId'
      preLoaderRoute: typeof AuthProductsProductIdRouteImport
      parentRoute: typeof AuthRoute
    }
  }
}

interface AuthRouteChildren {
  AuthProductsProductIdRoute: typeof AuthProductsProductIdRoute
  AuthProductsIndexRoute: typeof AuthProductsIndexRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthProductsProductIdRoute: AuthProductsProductIdRoute,
  AuthProductsIndexRoute: AuthProductsIndexRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
